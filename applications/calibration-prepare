#!/bin/bash

# This file is part of calibrate-range-sensor, a utility to calibrate extrinsic range sensor offsets
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#todo: migrate to latest standards for argument parsing
#todo: add a before and after view operation
name=$( basename $0 )

function errcho { (>&2 echo "$name: $1") }
function error
{
    errcho "error: $1"
    exit 1
}

function usage()
{
    echo
    echo "prepare sensor data for feature labeling and calibration"
    echo
    echo "usage: $name <log base dir> [<sensor options>]"
    echo "    <log base dir> : base directory of calibration log (contains nav.bin (--binary=t,6d --fields=t,x,y,z,roll,pitch,yaw) and sensor.bin (--binary=t,3d --fields=t,x,y,z))"
    echo "    <sensor options> : sensor-specific options, e.g. offsets, etc"
    echo
    echo "<sensor options>"
    echo "    --name=<sensor name> : e.g. sick-front (default is sensor) (note: maps to sick-front.bin or sensor.bin"
    echo "    --offset=<sensor offset> : e.g. 0,0,-0.8845,0,0,$(math-deg2rad 180)"
    echo "    --thin=<resolution> : e.g. 0.001 will keep only this fraction of points at random, default is no thinning"
    echo "    --rough=<resolution> : e.g. if specified, voxelise at this resolution and label roughly first, followed by fine labelling"
    echo "    --format : will return the format of the binary output of this script "
    echo "examples"
    echo "    $name ./ --name=puck --offset=0,0,0,0,0,0 --rough=0.2 --thin=0.001"
    echo "    $name ./ --name=puck --offset=0,0,0,0,0,0 --thin=0.0001"
    echo "    $name --format"
    echo 
    exit 1
}
LOG_DIR=$1
RUN_DIR=$(pwd)
OUTPUT="calibration"
OFFSET=
THIN=1.0
ROUGH=
MAXSTDDEV=0.05 #filter for 'bad' nav data
MAXGAP=0.04 #nav must be spaced closer in seconds than this to be used
FEATURE_FILTER_SIZE=0.5 #spatial filter size when using filter
NAME="sensor"

#get inputs
for cmd_args in "$@" ; do
    if [[ "$cmd_args" == '--help' || "${cmd_args}" == '-h' ]] ; then usage ; exit -1; fi
    if [[ "$cmd_args" == '--format' ]] ; then echo 't,15d,ui' ; exit 0; fi
    if [[ "$( echo $cmd_args | grep '\-\-offset=' )" != "" ]]; then OFFSET="${cmd_args#--offset=}"; fi
    if [[ "$( echo $cmd_args | grep '\-\-name=' )" != "" ]]; then NAME="${cmd_args#--name=}"; fi
    if [[ "$( echo $cmd_args | grep '\-\-thin=' )" != "" ]]; then THIN="${cmd_args#--thin=}"; fi
    if [[ "$( echo $cmd_args | grep '\-\-rough=' )" != "" ]]; then ROUGH="${cmd_args#--rough=}"; fi
    if [[ "$( echo $cmd_args | grep '\-\-features=' )" != "" ]]; then FEATURES="${cmd_args#--features=}"; fi
done

#use supplied or default offset plus nav
if [[ "$OFFSET" != "" ]] ; then
    OFFSET_STRING="$OFFSET + $LOG_DIR/nav.bin"
    errcho
    errcho "using given offset: $OFFSET"
    errcho
else
    errcho "error: no initial offset supplied"
    usage
fi

[[ -s $LOG_DIR/nav.bin ]] || error "could not find trajectory file: $LOG_DIR/nav.bin"
[[ -s $LOG_DIR/$NAME.bin ]] || error "could not find sensor file: $LOG_DIR/$NAME.bin"

errcho "view nav data - check the trajectory is smooth, indicating a good nav solution"
cat $LOG_DIR/nav.bin | view-points --binary=t,6d --fields=t,x,y,z,,,

function filter
{
    if [ -n "$ROUGH" ] ; then
        points-join --binary=t,12d --fields=,,,,x,y,z --radius=$FEATURE_FILTER_SIZE "$NAME.rough.bin;binary=t,12d,ui;fields=,,,,x,y,z" \
            | csv-shuffle --binary=t,12d,t,12d,ui --fields=t,xs,ys,zs,xn,yn,zn,x,y,z,roll,pitch,yaw,,,,,,,,,,,,,,id --output-fields=t,xs,ys,zs,xn,yn,zn,x,y,z,roll,pitch,yaw,id
    else
        csv-paste "-;binary=t,12d" "value=0;binary=ui"
    fi
}

function thin
{
    if [ -n "$THIN" ] ; then
        #points-calc thin --points-per-voxel=1 --resolution=$THIN --binary=t,12d --fields=,,,,x,y,z
        points-calc thin --rate=$THIN --resolution=0.5 --binary=t,12d --fields=,,,,x,y,z
    else
        cat
    fi
}

if [ -n "$ROUGH" ] ; then
    errcho 'georeferencing and voxelising for initial rough labelling...'
    pv $LOG_DIR/$NAME.bin \
        | csv-shuffle --binary=t,3d --fields=t,x,y,z --output-fields=t,x,y,z,x,y,z \
        | points-frame --max-gap=$MAXGAP --output-frame --from="$OFFSET_STRING" --binary=t,6d --fields=t,,,,x,y,z --discard \
        | points-calc thin --points-per-voxel=1 --resolution=$ROUGH --binary=t,12d --fields=,,,,x,y,z \
        | csv-paste "-;binary=t,12d" "value=0;binary=ui" \
        > $NAME.rough.bin

    errcho 'loading voxelised data in label-points. Roughly select calibration features, label them 1,2,3... use 0 for non features...'
    label-points "$NAME.rough.bin;binary=t,12d,ui;fields=t,,,,x,y,z,,,,,,,id"

    errcho 'retaining selected points only...'
    cat $NAME.rough.bin | csv-select --binary=t,12d,ui --fields=",,,,,,,,,,,,,id" "id;from=1" | sponge $NAME.rough.bin
fi        
        

errcho 'georeferencing and thinning for fine labelling...'
pv $LOG_DIR/$NAME.bin \
    | csv-shuffle --binary=t,3d --fields=t,x,y,z --output-fields=t,x,y,z,x,y,z \
    | points-frame --max-gap=$MAXGAP --output-frame --from="$OFFSET_STRING" --binary=t,6d --fields=t,,,,x,y,z --discard \
    | points-calc thin --rate=$THIN --resolution=0.5 --binary=t,12d --fields=,,,,x,y,z \
    | filter \
    > temp-$NAME.features.bin


errcho 'loading in label-points. Select calibration features, label them 1,2,3... use 0 for non features...'
if [[ $ROUGH ]] ; then
    label-points "temp-$NAME.features.bin;binary=t,12d,ui;fields=t,,,,x,y,z,,,,,,,id" "$NAME.rough.bin;binary=t,12d,ui;fields=,,,,x,y,z,,,,,,,id"
else
    label-points "temp-$NAME.features.bin;binary=t,12d,ui;fields=t,,,,x,y,z,,,,,,,id"
fi



errcho "forming final file, with only feature data..."
pv temp-$NAME.features.bin | csv-select --binary=t,12d,ui --fields=",,,,,,,,,,,,,id" "id;from=1" > $NAME.features.bin

#errcho "creating ascii version for..."
#pv $NAME.features.bin | csv-from-bin t,12d,ui --precision=10 > $NAME.features.csv

errcho "view final data to confirm it is appropriate for calibration"
cat $NAME.features.bin | view-points --binary=t,12d,ui --fields=t,,,,x,y,z,,,,,,,id

echo -e "fields=t,xs,ys,zs,xn,yn,zn,north,east,down,roll,pitch,yaw,feature\nbinary=t,12d,ui\noffset/initial=$OFFSET" | name-value-convert --to json > $NAME.features.json

errcho "calibration preparation is complete, now \"load $NAME.features.csv\" OR \"bin_load('$NAME.features.bin','t,d,d,d,d,d,d,d,d,d,d,d,d,ui')\"in matlab for calibration calibrate"
